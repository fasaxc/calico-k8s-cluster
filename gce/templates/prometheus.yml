scrape_configs:
- job_name: prometheus
  scrape_interval: 10s
  target_groups:
  - targets: ["127.0.0.1:9090"]
- job_name: felix
  scrape_interval: 10s
  target_groups:
  - targets: __FELIXES__
    labels:
      node_type: compute
  - targets: ["__CLUSTER_PREFIX__-master:9091"]
    labels:
      node_type: k8s_master
- job_name: etcd-driver
  scrape_interval: 10s
  target_groups:
  - targets: __DRIVERS__
    labels:
      node_type: compute
  - targets: ["__CLUSTER_PREFIX__-master:9092"]
    labels:
      node_type: k8s_master
- job_name: etcd
  scrape_interval: 10s
  target_groups:
  - targets: __PROM_ETCD_ENDPOINTS__
- job_name: k8s-etcd
  scrape_interval: 10s
  target_groups:
  - targets: ["__CLUSTER_PREFIX__-master:2379"]
- job_name: k8s-api
  scrape_interval: 10s
  target_groups:
  - targets: ["__CLUSTER_PREFIX__-master:8080"]
- job_name: host
  scrape_interval: 10s
  target_groups:
  - targets: __PROM_HOSTS__
    labels:
      node_type: compute
  - targets: __PROM_ETCD_HOST_ENDPOINTS__
    labels:
      node_type: etcd
  - targets: ["__CLUSTER_PREFIX__-master:9100"]
    labels:
      node_type: k8s_master
  - targets: ["__CLUSTER_PREFIX__-prom:9100"]
    labels:
      node_type: prom

# The following is commented out because promethues does not cope well with
#  collecting all of these diags when you have 1000 nodes and 30000 pods!

#- job_name: 'kubernetes-cluster'
#
#  kubernetes_sd_configs:
#  - api_servers:
#    - 'http://__CLUSTER_PREFIX__-master:8080'
#    in_cluster: false
#
#  relabel_configs:
#  - source_labels: [__meta_kubernetes_node_label_io_kubernetes_container_name]
#    regex: POD
#    action: drop
#  - source_labels: [__meta_kubernetes_role]
#    action: keep
#    regex: (?:apiserver|node)
#  - action: labelmap
#    regex: __meta_kubernetes_node_label_(.+)
#  - source_labels: [__meta_kubernetes_role]
#    action: replace
#    target_label: kubernetes_role

# Scrape config for service endpoints.
#
# The relabeling allows the actual service scrape endpoint to be configured
# via the following annotations:
#
# * `prometheus.io/scrape`: Only scrape services that have a value of `true`
# * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
# to set this to `https` & most likely set the `tls_config` of the scrape config.
# * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
# * `prometheus.io/port`: If the metrics are exposed on a different port to the
# service then set this appropriately.
#- job_name: 'kubernetes-service-endpoints'
#
#  kubernetes_sd_configs:
#  - api_servers:
#    - 'https://kubernetes.default.svc'
#    in_cluster: true
#
#  relabel_configs:
#  - source_labels: [__meta_kubernetes_node_label_io_kubernetes_container_name]
#    regex: POD
#    action: drop
#  - source_labels: [__meta_kubernetes_role, __meta_kubernetes_service_annotation_prometheus_io_scrape]
#    action: keep
#    regex: endpoint;true
#  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
#    action: replace
#    target_label: __scheme__
#    regex: (https?)
#  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
#    action: replace
#    target_label: __metrics_path__
#    regex: (.+)
#  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
#    action: replace
#    target_label: __address__
#    regex: (.+)(?::\d+);(\d+)
#    replacement: $1:$2
#  - action: labelmap
#    regex: __meta_kubernetes_service_label_(.+)
#  - source_labels: [__meta_kubernetes_role]
#    action: replace
#    target_label: kubernetes_role
#  - source_labels: [__meta_kubernetes_service_namespace]
#    action: replace
#    target_label: kubernetes_namespace
#  - source_labels: [__meta_kubernetes_service_name]
#    action: replace
#    target_label: kubernetes_name

# Example scrape config for probing services via the Blackbox Exporter.
#
# The relabeling allows the actual service scrape endpoint to be configured
# via the following annotations:
#
# * `prometheus.io/probe`: Only probe services that have a value of `true`
#- job_name: 'kubernetes-services'
#
#  metrics_path: /probe
#  params:
#    module: [http_2xx]
#
#  kubernetes_sd_configs:
#  - api_servers:
#    - 'https://kubernetes.default.svc'
#    in_cluster: true
#
#  relabel_configs:
#  - source_labels: [__meta_kubernetes_node_label_io_kubernetes_container_name]
#    regex: POD
#    action: drop
#  - source_labels: [__meta_kubernetes_role, __meta_kubernetes_service_annotation_prometheus_io_probe]
#    action: keep
#    regex: service;true
#  - source_labels: [__address__]
#    target_label: __param_target
#  - target_label: __address__
#    replacement: blackbox
#  - source_labels: [__param_target]
#    target_label: instance
#  - action: labelmap
#    regex: __meta_kubernetes_service_label_(.+)
#  - source_labels: [__meta_kubernetes_role]
#    target_label: kubernetes_role
#  - source_labels: [__meta_kubernetes_service_namespace]
#    target_label: kubernetes_namespace
#  - source_labels: [__meta_kubernetes_service_name]
#    target_label: kubernetes_name
